fn buffer_overflow_example() {
    let mut buffer: [u8; 5] = [0; 5];
    let index = 10; // Potential buffer overflow if not properly checked.
    unsafe {
        buffer[index] = 42;
    }
}

fn transmute_example() {
    let data: u32 = 42;
    let transmuted_data: f32 = unsafe { std::mem::transmute(data) };
    // Careless use of transmute can lead to undefined behavior.
}

fn insecure_input_validation(user_input: &str) {
    let query = format!("SELECT * FROM users WHERE name = '{}'", user_input);
    // This is vulnerable to SQL injection.
}


struct UnsafeWrapper {
    data: i32,
}

unsafe impl Send for UnsafeWrapper {
    // Unsafe implementation of the Send trait can lead to data races.
}

fn main() {
    let _data = UnsafeWrapper { data: 42 };
    let thread1 = std::thread::spawn(|| {
        // Some code using data
    });
    let thread2 = std::thread::spawn(|| {
        // Some other code using data
    });
    thread1.join().unwrap();
    thread2.join().unwrap();
}

fn unsafe_mutable_reference() {
    let mut data: i32 = 42;
    let reference = &mut data;
    // Unsafe to have two mutable references to 'data'.
    let another_reference = &mut data; // Potential data race.
}



